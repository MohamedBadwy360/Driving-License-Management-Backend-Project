// <auto-generated />
using System;
using DLMS.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DLMS.EF.Migrations
{
    [DbContext(typeof(DLMSContext))]
    [Migration("20240403035000_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DLMS.Core.Models.Application", b =>
                {
                    b.Property<int>("ApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationID"));

                    b.Property<int>("ApplicantPersonID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("ApplicationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasComment("1-New 2-Cancelled 3-Completed");

                    b.Property<int>("ApplicationTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastStatusDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.HasKey("ApplicationID");

                    b.HasIndex("ApplicantPersonID");

                    b.HasIndex("ApplicationTypeID");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("DLMS.Core.Models.ApplicationType", b =>
                {
                    b.Property<int>("ApplicationTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ApplicationTypeID"));

                    b.Property<decimal>("ApplicationFees")
                        .HasColumnType("smallmoney");

                    b.Property<string>("ApplicationTypeTitle")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("ApplicationTypeID");

                    b.ToTable("ApplicationTypes");
                });

            modelBuilder.Entity("DLMS.Core.Models.Country", b =>
                {
                    b.Property<int>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryID"));

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CountryID")
                        .HasName("PK__Countrie__10D160BFDBD6933F");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DLMS.Core.Models.DetainedLicense", b =>
                {
                    b.Property<int>("DetainID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DetainID"));

                    b.Property<DateTime>("DetainDate")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal>("FineFees")
                        .HasColumnType("smallmoney");

                    b.Property<bool>("IsReleased")
                        .HasColumnType("bit");

                    b.Property<int>("LicenseID")
                        .HasColumnType("int");

                    b.Property<int?>("ReleaseApplicationID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("smalldatetime");

                    b.HasKey("DetainID");

                    b.HasIndex("LicenseID");

                    b.HasIndex("ReleaseApplicationID");

                    b.ToTable("DetainedLicenses");
                });

            modelBuilder.Entity("DLMS.Core.Models.Driver", b =>
                {
                    b.Property<int>("DriverID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DriverID"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("PersonID")
                        .HasColumnType("int");

                    b.HasKey("DriverID")
                        .HasName("PK_Drivers_1");

                    b.HasIndex("PersonID");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DLMS.Core.Models.InternationalLicense", b =>
                {
                    b.Property<int>("InternationalLicenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InternationalLicenseID"));

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("IssuedUsingLocalLicenseID")
                        .HasColumnType("int");

                    b.HasKey("InternationalLicenseID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("DriverID");

                    b.HasIndex("IssuedUsingLocalLicenseID");

                    b.ToTable("InternationalLicenses");
                });

            modelBuilder.Entity("DLMS.Core.Models.License", b =>
                {
                    b.Property<int>("LicenseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseID"));

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("DriverID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("IssueReason")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasComment("1-FirstTime, 2-Renew, 3-Replacement for Damaged, 4- Replacement for Lost.");

                    b.Property<int>("LicenseClass")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.HasKey("LicenseID");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("DriverID");

                    b.HasIndex("LicenseClass");

                    b.ToTable("Licenses");
                });

            modelBuilder.Entity("DLMS.Core.Models.LicenseClass", b =>
                {
                    b.Property<int>("LicenseClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LicenseClassID"));

                    b.Property<string>("ClassDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("ClassFees")
                        .HasColumnType("smallmoney");

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("DefaultValidityLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasComment("How many years the licesnse will be valid.");

                    b.Property<byte>("MinimumAllowedAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)18)
                        .HasComment("Minmum age allowed to apply for this license");

                    b.HasKey("LicenseClassID");

                    b.ToTable("LicenseClasses");
                });

            modelBuilder.Entity("DLMS.Core.Models.LocalDrivingLicenseApplication", b =>
                {
                    b.Property<int>("LocalDrivingLicenseApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocalDrivingLicenseApplicationID"));

                    b.Property<int>("ApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("LicenseClassID")
                        .HasColumnType("int");

                    b.HasKey("LocalDrivingLicenseApplicationID")
                        .HasName("PK_DrivingLicsenseApplications");

                    b.HasIndex("ApplicationID");

                    b.HasIndex("LicenseClassID");

                    b.ToTable("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("DLMS.Core.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PersonID"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte>("Gendor")
                        .HasColumnType("tinyint")
                        .HasComment("0 Male , 1 Femail");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NationalNo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("NationalityCountryID")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("SecondName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("ThirdName")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("PersonID");

                    b.HasIndex("NationalityCountryID");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DLMS.Core.Models.Test", b =>
                {
                    b.Property<int>("TestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestID"));

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TestAppointmentID")
                        .HasColumnType("int");

                    b.Property<bool>("TestResult")
                        .HasColumnType("bit")
                        .HasComment("0 - Fail 1-Pass");

                    b.HasKey("TestID");

                    b.HasIndex("TestAppointmentID");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("DLMS.Core.Models.TestAppointment", b =>
                {
                    b.Property<int>("TestAppointmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestAppointmentID"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("smalldatetime");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int>("LocalDrivingLicenseApplicationID")
                        .HasColumnType("int");

                    b.Property<decimal>("PaidFees")
                        .HasColumnType("smallmoney");

                    b.Property<int?>("RetakeTestApplicationID")
                        .HasColumnType("int");

                    b.Property<int>("TestTypeID")
                        .HasColumnType("int");

                    b.HasKey("TestAppointmentID");

                    b.HasIndex("LocalDrivingLicenseApplicationID");

                    b.HasIndex("RetakeTestApplicationID");

                    b.HasIndex("TestTypeID");

                    b.ToTable("TestAppointments");
                });

            modelBuilder.Entity("DLMS.Core.Models.TestType", b =>
                {
                    b.Property<int>("TestTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestTypeID"));

                    b.Property<string>("TestTypeDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("TestTypeFees")
                        .HasColumnType("smallmoney");

                    b.Property<string>("TestTypeTitle")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("TestTypeID");

                    b.ToTable("TestTypes");
                });

            modelBuilder.Entity("DLMS.Core.Models.Application", b =>
                {
                    b.HasOne("DLMS.Core.Models.Person", "ApplicantPerson")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicantPersonID")
                        .IsRequired()
                        .HasConstraintName("FK_Applications_People");

                    b.HasOne("DLMS.Core.Models.ApplicationType", "ApplicationType")
                        .WithMany("Applications")
                        .HasForeignKey("ApplicationTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_Applications_ApplicationTypes");

                    b.Navigation("ApplicantPerson");

                    b.Navigation("ApplicationType");
                });

            modelBuilder.Entity("DLMS.Core.Models.DetainedLicense", b =>
                {
                    b.HasOne("DLMS.Core.Models.License", "License")
                        .WithMany("DetainedLicenses")
                        .HasForeignKey("LicenseID")
                        .IsRequired()
                        .HasConstraintName("FK_DetainedLicenses_Licenses");

                    b.HasOne("DLMS.Core.Models.Application", "ReleaseApplication")
                        .WithMany("DetainedLicenses")
                        .HasForeignKey("ReleaseApplicationID")
                        .HasConstraintName("FK_DetainedLicenses_Applications");

                    b.Navigation("License");

                    b.Navigation("ReleaseApplication");
                });

            modelBuilder.Entity("DLMS.Core.Models.Driver", b =>
                {
                    b.HasOne("DLMS.Core.Models.Person", "Person")
                        .WithMany("Drivers")
                        .HasForeignKey("PersonID")
                        .IsRequired()
                        .HasConstraintName("FK_Drivers_People");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("DLMS.Core.Models.InternationalLicense", b =>
                {
                    b.HasOne("DLMS.Core.Models.Application", "Application")
                        .WithMany("InternationalLicenses")
                        .HasForeignKey("ApplicationID")
                        .IsRequired()
                        .HasConstraintName("FK_InternationalLicenses_Applications");

                    b.HasOne("DLMS.Core.Models.Driver", "Driver")
                        .WithMany("InternationalLicenses")
                        .HasForeignKey("DriverID")
                        .IsRequired()
                        .HasConstraintName("FK_InternationalLicenses_Drivers");

                    b.HasOne("DLMS.Core.Models.License", "IssuedUsingLocalLicense")
                        .WithMany("InternationalLicenses")
                        .HasForeignKey("IssuedUsingLocalLicenseID")
                        .IsRequired()
                        .HasConstraintName("FK_InternationalLicenses_Licenses");

                    b.Navigation("Application");

                    b.Navigation("Driver");

                    b.Navigation("IssuedUsingLocalLicense");
                });

            modelBuilder.Entity("DLMS.Core.Models.License", b =>
                {
                    b.HasOne("DLMS.Core.Models.Application", "Application")
                        .WithMany("Licenses")
                        .HasForeignKey("ApplicationID")
                        .IsRequired()
                        .HasConstraintName("FK_Licenses_Applications");

                    b.HasOne("DLMS.Core.Models.Driver", "Driver")
                        .WithMany("Licenses")
                        .HasForeignKey("DriverID")
                        .IsRequired()
                        .HasConstraintName("FK_Licenses_Drivers");

                    b.HasOne("DLMS.Core.Models.LicenseClass", "LicenseClassNavigation")
                        .WithMany("Licenses")
                        .HasForeignKey("LicenseClass")
                        .IsRequired()
                        .HasConstraintName("FK_Licenses_LicenseClasses");

                    b.Navigation("Application");

                    b.Navigation("Driver");

                    b.Navigation("LicenseClassNavigation");
                });

            modelBuilder.Entity("DLMS.Core.Models.LocalDrivingLicenseApplication", b =>
                {
                    b.HasOne("DLMS.Core.Models.Application", "Application")
                        .WithMany("LocalDrivingLicenseApplications")
                        .HasForeignKey("ApplicationID")
                        .IsRequired()
                        .HasConstraintName("FK_DrivingLicsenseApplications_Applications");

                    b.HasOne("DLMS.Core.Models.LicenseClass", "LicenseClass")
                        .WithMany("LocalDrivingLicenseApplications")
                        .HasForeignKey("LicenseClassID")
                        .IsRequired()
                        .HasConstraintName("FK_DrivingLicsenseApplications_LicenseClasses");

                    b.Navigation("Application");

                    b.Navigation("LicenseClass");
                });

            modelBuilder.Entity("DLMS.Core.Models.Person", b =>
                {
                    b.HasOne("DLMS.Core.Models.Country", "NationalityCountry")
                        .WithMany("People")
                        .HasForeignKey("NationalityCountryID")
                        .IsRequired()
                        .HasConstraintName("FK_People_Countries1");

                    b.Navigation("NationalityCountry");
                });

            modelBuilder.Entity("DLMS.Core.Models.Test", b =>
                {
                    b.HasOne("DLMS.Core.Models.TestAppointment", "TestAppointment")
                        .WithMany("Tests")
                        .HasForeignKey("TestAppointmentID")
                        .IsRequired()
                        .HasConstraintName("FK_Tests_TestAppointments");

                    b.Navigation("TestAppointment");
                });

            modelBuilder.Entity("DLMS.Core.Models.TestAppointment", b =>
                {
                    b.HasOne("DLMS.Core.Models.LocalDrivingLicenseApplication", "LocalDrivingLicenseApplication")
                        .WithMany("TestAppointments")
                        .HasForeignKey("LocalDrivingLicenseApplicationID")
                        .IsRequired()
                        .HasConstraintName("FK_TestAppointments_LocalDrivingLicenseApplications");

                    b.HasOne("DLMS.Core.Models.Application", "RetakeTestApplication")
                        .WithMany("TestAppointments")
                        .HasForeignKey("RetakeTestApplicationID")
                        .HasConstraintName("FK_TestAppointments_Applications");

                    b.HasOne("DLMS.Core.Models.TestType", "TestType")
                        .WithMany("TestAppointments")
                        .HasForeignKey("TestTypeID")
                        .IsRequired()
                        .HasConstraintName("FK_TestAppointments_TestTypes");

                    b.Navigation("LocalDrivingLicenseApplication");

                    b.Navigation("RetakeTestApplication");

                    b.Navigation("TestType");
                });

            modelBuilder.Entity("DLMS.Core.Models.Application", b =>
                {
                    b.Navigation("DetainedLicenses");

                    b.Navigation("InternationalLicenses");

                    b.Navigation("Licenses");

                    b.Navigation("LocalDrivingLicenseApplications");

                    b.Navigation("TestAppointments");
                });

            modelBuilder.Entity("DLMS.Core.Models.ApplicationType", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("DLMS.Core.Models.Country", b =>
                {
                    b.Navigation("People");
                });

            modelBuilder.Entity("DLMS.Core.Models.Driver", b =>
                {
                    b.Navigation("InternationalLicenses");

                    b.Navigation("Licenses");
                });

            modelBuilder.Entity("DLMS.Core.Models.License", b =>
                {
                    b.Navigation("DetainedLicenses");

                    b.Navigation("InternationalLicenses");
                });

            modelBuilder.Entity("DLMS.Core.Models.LicenseClass", b =>
                {
                    b.Navigation("Licenses");

                    b.Navigation("LocalDrivingLicenseApplications");
                });

            modelBuilder.Entity("DLMS.Core.Models.LocalDrivingLicenseApplication", b =>
                {
                    b.Navigation("TestAppointments");
                });

            modelBuilder.Entity("DLMS.Core.Models.Person", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Drivers");
                });

            modelBuilder.Entity("DLMS.Core.Models.TestAppointment", b =>
                {
                    b.Navigation("Tests");
                });

            modelBuilder.Entity("DLMS.Core.Models.TestType", b =>
                {
                    b.Navigation("TestAppointments");
                });
#pragma warning restore 612, 618
        }
    }
}
